postAssertionTest
├── when stakingQueue.length is > 0
│   └── it should stake all orders in the stakingQueue
├── it shoul delete the stakingQueue
├── it should set the queued funds to zero
├── if there aren't enough funds to pay the assertion fee
│   └── it should revert
└── if there are enough funds to pay the assertion fee
    ├── it should post a valid assertion in the UMA oracle
    ├── it should store the RewardRound configuration
    └── it should return a correct assertionId


createKPITest
├── if the number of tranches is 0
│   └── it should revert
├── if the number of tranches is > 20
│   └── it should revert
├── if the length of the trancheValue array and the trancheReward array don't match
│   └── it should revert
├── if the values in the trancheValue array aren't incremental
│   └── it should revert
└── when the input is valid
    └── it should create a KPI struct with the currentKPI counter as assertionId
        ├── it should store the current timestamp
        ├── it should store the values given as input
        ├── it should increase the KPICounter
        └── it should emit an event

setAssertionTest
# TODO

setKPITest
├── if the KPI number is above the current KPI
│   └── it should revert
└── if the KPI number is among the existing KPIs
    ├── it should change the activeKPI to the given KPI
    └── it should emit an event

stakeTest
├── if the staked amount is 0
│   └── it should revert
├── if the length of the staking Queue is already at MAX_QUEUE_LENGTH
│   └── it should revert
├── if the caller does not have sufficient funds
│   └── it should revert
└── if the caller has sufficient funds
    ├── it should store the amount + caller in the staking Queue
    ├── it should increase the value of totalQueuedFunds by the staked amount
    └── it should emit an event

assertionresolvedCallbackTest
├── if the assertion resolved to false
│   └── it should emit an event
└── if the assertion resolved to true
    ├── it will go through all tranches until reaching the asserted amount
    ├── if the rewardType is continuous
    │   └── the payout from the last tranche should be proportional to its level of completion
    ├── if the rewardType is not continuous
    │   └── the uncompleted tranche should not be paid out at all
    ├── it should set the staking rewards to the calculated value with a duration of 1
    └── it should emit an event
